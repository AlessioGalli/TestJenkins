pipeline {
  
  agent any

  environment {
    MSBUILD = "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\MSBuild.exe"
    CONFIG = 'Release'
    PLATFORM = 'x86'
    BIN_FOLDER_DESTINATION = "C:\\Users\\u14856\\Downloads\\output_Jenkins"
  }
  
  stages {

      stage("Clone Git Repository") {
          steps {
              git(
                  url: "https://github.com/AlessioGalli/TestJenkins.git",
                  branch: "master",
                  changelog: true,
                  poll: true
              )
            
          }
      }


    stage('Update manifest version') {
      steps {
          powershell '''
              # leggo la versione dal file
              $assemblyInfoPath="TestJenkins\\Properties\\AssemblyInfo.cs"
              $contents = [System.IO.File]::ReadAllText($assemblyInfoPath)
              $versionString = [RegEx]::Match($contents,"(AssemblyFileVersion\\("")(?:\\d+\\.\\d+\\.\\d+\\.\\d+)(""\\))")		# estraggo la versione assembly 
              Write-Host ("AssemblyFileVersion: " +$versionString)													# e la stampo
              
              #estraggo la versione e me la salvo nella variabile d'ambiene per lo step dopo
              #${env:BUILD_VERSION} = [RegEx]::Match($contents,"(?:\\d+\\.\\d+\\.\\d+\\.\\d+)").ToString()

              #estraggo il numero di build (l'ultimo della serie della versione)
              $currentBuild = [RegEx]::Match($versionString,"(\\.)(\\d+)(""\\))").Groups[2]
              Write-Host ("Current Build: " + $currentBuild.Value)
              
              #incremento
              $newBuild= [int]$currentBuild.Value +  1
              Write-Host ("Nuova build: " + $newBuild)
              
              #faccio update del file e lo sovrascrivo
              Write-Host ("Setting version in assembly info file ")
              $contents = [RegEx]::Replace($contents, "(AssemblyVersion\\(""\\d+\\.\\d+\\.\\d+\\.)(?:\\d+)(""\\))", ("`${1}" + $newBuild.ToString() + "`${2}"))
              $contents = [RegEx]::Replace($contents, "(AssemblyFileVersion\\(""\\d+\\.\\d+\\.\\d+\\.)(?:\\d+)(""\\))", ("`${1}" + $newBuild.ToString() + "`${2}"))
              [System.IO.File]::WriteAllText($assemblyInfoPath, $contents)
              
              # ritiro fuori la versione e me la salvo in un file version.txt nella cartella principale del workspace
              $version = gc $assemblyInfoPath | select-string -pattern "AssemblyVersion"
              $BuildVersionNumber = $version -match '^\\[assembly: AssemblyVersion\\(\\"(?<major>[0-9]+)\\.(?<minor>[0-9]+)\\.(?<revision>[0-9]+)\\.(?<build>[0-9]+)\\"\\)\\]'
              $path = "version.txt"
              $BuildVersionNumber | out-file -encoding ASCII -filepath $path
          '''
      }
    }
    
      stage('Build') {
        
          steps {
           // bat "dotnet restore TestJenkins\\TestJenkins.csproj"
            //bat "\"${MSBUILD}\" TestJenkins\\TestJenkins.csproj /t:rebuild /clp:ShowCommandLine"
            bat "\"${MSBUILD}\" TestJenkins.sln /t:rebuild /clp:ShowCommandLine /p:Configuration=Release" 
          
        }
      }


      stage('Copy BIN folder') {
        
          steps {
            powershell '''
              # -------------------------------------sta parte Ã¨ da rivedere. la versione me la devo salvare dallo step prima------------------------------------------------
              # leggo la versione dal file
              $assemblyInfoPath="TestJenkins\\Properties\\AssemblyInfo.cs"
              $contents = [System.IO.File]::ReadAllText($assemblyInfoPath)
              $versionString = [RegEx]::Match($contents,"(AssemblyFileVersion\\("")(?:\\d+\\.\\d+\\.\\d+\\.\\d+)(""\\))")		# estraggo la versione assembly 
              Write-Host ("AssemblyFileVersion: " +$versionString)													# e la stampo
              
              #estraggo la versione e me la salvo nella variabile d'ambiene per lo step dopo
              $BUILD_VERSION = [RegEx]::Match($contents,"(?:\\d+\\.\\d+\\.\\d+\\.\\d+)").ToString()
              #---------------------------------------------------------------------------------------------------------------------------------------------------------------

              # copio la cartella bin da un'altra parte
              $destPath = ${env:BIN_FOLDER_DESTINATION} + "\\BUILD " + $BUILD_VERSION # qui uso la BUILD_VERSION che ho salvato prima

              echo "destinatione: " + $destPath
              Copy-Item -Path "TestJenkins\\bin" -Destination "$destPath" -Recurse
          '''
          
        }
      }


      stage("Push to Git Repository") {
            steps {
              sh "git add --all"
              sh "git commit -m 'initial commit'"
              sh "git push origin HEAD:master"
                //withCredentials([gitUsernamePassword(credentialsId: 'GitHubToken', gitToolName: 'Default')]) {
                  //  sh "git push -u origin master"
                //}
        }
      }

  }

  post {
    always {
        deleteDir()
    }
  }

}
